#include <vector>
#include <iostream>
#include <atomic>
#include <thread>
#include <fstream>
#include <sstream>
#include <string>
#include <algorithm> 
#include <cstdlib>

#include "headers/GlobalVars.h"
#include "headers/SSP.h"

#ifndef IGNORE_FMT
#include <fmt/ranges.h>
#include <fmt/core.h>
#endif

#include "../../PTAPI/include/ExecTime.h"
#include "../../PTAPI/include/PT.h"

using namespace std;


// ------------------------------------------------------------------------------------------------------------------------------------------------------
// MAIN
// ------------------------------------------------------------------------------------------------------------------------------------------------------

solSSP makeTestSol(int length){
	solSSP sol;
	// vector<int> s = {70,415,320,673,268,263,670,229,197,109,777,797,891,639,164,847,254,21,34,64,870,416,234,255,587,731,433,648,386,759,496,31,667,657,619,375,508,258,899,896,14,394,748,539,567,438,751,187,650,331,687,779,452,546,231,58,550,278,691,117,194,422,918,272,744,351,894,892,584,487,503,852,451,863,322,50,511,794,722,675,878,208,579,752,730,486,519,492,578,357,296,141,369,387,124,166,558,859,860,190,924,615,56,711,383,246,654,753,209,833,319,674,858,257,882,612,335,412,409,739,133,340,354,747,262,301,535,548,413,740,149,678,38,107,81,334,352,119,355,227,849,188,837,292,642,902,450,818,143,103,389,698,668,330,697,566,456,39,796,271,820,23,589,556,581,419,308,162,291,189,288,251,341,360,382,766,42,831,402,710,627,688,884,125,204,118,161,46,610,749,497,599,695,249,223,895,429,180,53,98,323,80,36,801,12,799,640,232,733,465,314,480,361,555,332,73,571,302,174,66,666,778,716,45,785,90,788,512,596,547,3,68,47,97,345,203,545,0,388,504,178,385,816,609,283,707,823,261,463,179,800,338,680,239,121,206,279,40,864,339,644,286,817,792,219,362,101,874,544,482,552,636,75,353,127,812,267,417,96,410,713,477,526,82,815,774,281,758,518,129,363,122,528,761,665,841,326,140,835,736,646,836,655,616,756,660,411,414,191,464,2,205,277,390,202,408,144,770,717,516,483,850,5,9,462,300,264,435,15,366,795,489,869,306,26,63,169,803,630,590,24,572,500,592,120,324,723,553,449,540,562,901,378,549,18,720,48,201,600,613,498,488,403,167,810,453,542,282,768,594,763,806,259,1,786,316,905,838,250,152,822,155,875,86,43,461,440,525,132,473,641,284,214,431,151,20,391,17,358,289,441,85,476,771,638,856,472,77,819,79,55,22,524,845,356,776,664,741,256,620,725,669,696,692,423,672,834,745,266,448,821,876,398,131,210,724,105,407,61,371,645,8,904,426,299,920,207,54,719,531,925,839,222,625,718,705,142,175,729,682,158,809,570,99,94,32,866,909,890,917,432,307,11,333,110,33,582,437,439,298,373,269,804,532,10,604,59,342,280,235,490,420,617,608,509,458,457,4,538,699,829,677,635,621,228,913,911,527,242,583,520,701,565,683,52,241,746,844,853,444,907,807,679,832,380,738,84,573,757,106,72,632,65,396,89,491,400,198,114,530,113,51,192,304,485,522,381,160,108,112,221,247,702,521,769,270,130,392,686,626,367,372,855,750,903,685,297,728,595,824,854,606,658,460,715,848,775,226,305,873,897,586,364,742,514,470,922,294,872,652,754,237,871,397,406,765,349,842,327,885,67,659,35,19,393,568,649,25,374,782,329,709,843,916,37,529,321,802,700,569,773,575,883,384,134,653,598,811,7,57,783,95,126,830,762,534,243,910,76,29,789,350,303,111,663,71,74,399,576,224,150,493,574,30,200,240,601,328,805,474,418,401,434,541,618,706,343,734,442,923,170,139,293,13,136,454,428,159,772,276,173,603,216,689,157,787,651,919,502,501,780,656,265,554,631,861,760,607,467,436,88,274,781,253,309,347,218,840,898,93,588,475,624,764,921,137,912,478,846,156,557,481,318,168,714,727,471,560,808,614,662,404,767,211,28,165,634,628,784,851,184,182,505,27,622,171,605,827,236,421,914,181,506,510,814,128,737,790,69,908,593,163,145,798,153,6,828,559,313,708,881,62,100,215,337,712,185,479,260,78,826,564,147,671,694,721,459,49,424,537,468,926,637,233,446,287,507,295,533,886,365,41,244,425,135,690,597,484,196,879,591,915,676,611,735,893,862,395,513,177,275,647,447,376,499,577,430,176,585,148,193,906,623,102,368,154,813,563,379,230,115,791,868,887,515,325,172,311,825,348,495,877,146,44,602,285,116,344,248,310,536,561,220,87,346,732,466,225,377,755,494,252,551,359,16,661,273,195,743,469,83,455,336,60,213,704,633,245,199,315,238,684,857,186,523,580,91,104,92,865,370,888,427,217,867,517,889,312,793,290,726,123,693,681,212,317,629,643,183,138,543,880,443,703,900,445,405,1105,995,1027,972,1198,1030,1125,1022,1113,985,1066,1191,1177,1130,1217,951,936,1048,1047,997,948,984,928,974,1087,1148,1128,1170,958,1207,1141,1186,1188,1051,987,1223,986,1189,1071,1073,1156,1137,1160,1136,1115,1154,976,955,1166,961,1149,1009,1010,1029,1033,1230,945,1132,1063,1227,1100,1032,1123,1224,1053,1000,1179,979,960,1214,964,1077,980,1180,982,1085,1025,1079,1089,991,1099,953,969,1235,957,1078,1126,989,929,1134,1157,990,1104,1185,931,1146,1038,944,1110,1220,1021,1002,971,1057,1042,1131,943,1005,1111,1094,930,1016,1152,1019,1205,1098,966,1026,1003,1086,1175,1059,947,1023,1222,1195,1102,1060,1070,998,977,1196,1012,959,1103,1142,999,1194,1161,1080,1081,1011,1231,1114,1017,975,1049,1234,1075,1153,950,1018,1076,1056,1209,1151,967,1065,1120,1199,1097,934,981,1054,1090,942,935,1083,1084,1024,1143,1015,1233,1187,1150,1092,1145,1190,1174,1133,1144,1229,994,1121,1176,1201,1181,1228,1118,1212,1088,970,1020,1006,1182,1107,1218,1043,1162,941,1040,1044,956,938,1226,968,1031,1232,996,1091,1203,1158,1206,1069,992,1041,1074,1167,946,933,1213,1129,1200,1045,1127,940,1165,1147,1096,1068,1215,1064,1028,1211,983,1058,1193,1039,1178,1046,1197,1004,1001,1034,1093,1204,1108,1183,1050,1139,1173,1163,949,1184,1221,1124,1159,1208,1101,978,1155,1067,1037,1095,1172,1225,1082,1061,1210,952,1116,939,1171,1140,927,954,1109,932,1008,1117,1013,1062,993,1036,1035,1052,1007,973,1135,1164,965,1112,963,1055,1216,1202,1106,962,1169,1122,937,1119,1219,1168,1072,1014,1138,1192,988};
	vector<int> s = {890,709,669,1173,1190,745,385,699,411,689,52,625,192,695,101,855,1196,557,559,794,67,989,152,515,556,475,359,125,361,749,1094,610,1122,620,1027,161,519,58,685,545,27,1020,128,1148,173,702,904,643,410,478,187,196,1006,267,103,796,1143,1166,1168,966,1123,170,207,1105,755,827,940,1223,1164,1232,312,1195,1014,229,290,1005,157,441,413,422,598,642,639,415,558,737,935,262,397,108,146,23,124,1114,57,1069,961,452,730,1067,641,1063,118,74,420,879,636,398,111,529,805,1116,801,227,693,977,599,604,495,443,918,679,999,350,373,266,710,245,852,628,421,375,697,764,1203,401,550,274,962,1128,611,252,112,1162,372,830,238,195,1107,863,1207,535,591,203,177,231,1090,133,947,1197,676,714,1145,321,457,1029,160,1017,850,428,456,22,109,18,403,1230,384,17,325,901,114,1186,551,507,24,1044,1103,272,913,525,902,143,717,740,132,320,787,926,750,1099,462,614,296,228,675,396,735,333,341,840,1184,767,239,706,666,506,484,658,512,624,243,500,197,746,646,499,1010,56,193,870,2,399,668,708,147,491,754,571,474,527,861,618,899,16,362,587,138,100,987,149,723,1212,366,480,284,930,449,431,122,106,1129,240,355,113,498,216,15,21,140,1033,629,919,212,1152,1157,453,715,188,110,35,719,1220,1222,3,191,743,41,728,917,463,469,621,763,1177,956,264,414,634,731,461,376,864,1111,543,623,429,530,896,42,129,981,872,645,324,309,698,190,447,1,729,45,179,820,927,878,974,494,789,722,761,747,346,626,291,882,156,351,785,440,189,944,332,600,386,225,1156,632,368,933,303,1199,786,925,774,664,1144,162,330,923,208,1040,285,524,339,302,328,633,897,297,1206,824,377,522,1046,306,523,694,155,561,553,466,772,308,1140,215,1109,647,424,165,476,837,387,430,338,791,1219,622,334,1037,382,905,736,810,1012,439,1048,680,946,358,468,671,1093,126,72,477,1062,806,1208,1127,481,1025,354,1028,792,619,36,269,1198,116,488,769,670,975,168,371,367,631,280,744,70,656,349,779,845,514,713,766,678,1023,29,1192,848,973,931,601,712,246,576,663,119,688,37,1064,1087,83,1045,544,773,1189,220,1216,370,533,1159,924,202,458,648,964,651,344,448,831,945,1074,1056,1112,1078,804,1026,751,62,198,405,969,686,364,14,1200,1049,592,1154,151,934,283,174,223,630,217,1191,877,363,316,230,307,780,637,1068,1102,860,301,866,214,425,175,281,868,75,30,28,270,683,1086,835,752,635,1185,720,790,528,206,1066,1234,851,65,565,154,607,141,11,395,331,318,858,501,741,85,662,1160,1181,1228,955,393,402,199,1225,1057,40,178,404,485,87,329,970,1131,770,843,834,954,760,892,1150,1073,1085,608,1117,265,1054,438,242,121,315,911,1004,586,26,31,1043,518,20,1079,1218,814,247,560,107,1070,127,135,605,532,995,446,788,997,690,273,577,120,585,150,236,263,965,875,627,46,249,369,66,916,880,169,1124,991,908,825,275,94,1146,1115,757,268,960,13,25,379,884,1134,756,657,692,1101,674,898,1118,319,677,226,224,797,941,1178,1091,992,1051,552,818,869,130,742,12,1002,1137,1188,1075,534,335,1163,584,900,34,1151,665,418,844,412,881,782,886,971,649,1125,588,1011,738,1133,659,953,1077,812,771,748,920,459,703,1179,64,1121,936,849,531,1108,569,1034,1042,1171,968,222,721,1007,348,732,707,186,1169,248,250,63,244,1201,1226,123,716,733,204,479,148,194,682,392,889,950,783,383,1041,423,1141,589,640,1009,241,1174,102,976,661,314,922,672,937,681,310,593,460,1089,406,1019,489,1153,394,606,340,43,213,445,650,914,0,615,1082,696,82,444,711,176,470,287,778,857,562,821,957,6,939,1000,286,360,753,433,71,568,921,948,958,139,570,86,39,313,1083,1022,874,44,10,684,164,609,526,282,833,50,38,171,1158,365,673,1015,765,762,784,667,807,304,117,115,1110,513,644,400,718,1130,1024,432,819,1139,311,271,347,142,781,172,815,237,305,984,7,1147,163,1135,19,542,53,378,563,300,564,691,209,912,739,80,1170,938,419,915,990,734,427,153,817,894,95,638,251,59,51,317,1036,1076,490,808,205,374,1072,893,1126,854,467,777,903,407,978,768,590,687,811,47,81,442,802,134,1053,1095,660,876,1209,221,1205,1018,253,426,73,345,471,84,131,1050,829,1231,1100,261,409,166,1096,1138,389,980,450,985,136,951,381,258,69,502,1038,1165,356,943,218,508,701,1193,979,511,566,1194,298,1132,1081,496,99,906,613,1210,233,510,581,1155,520,967,323,294,726,90,871,856,1211,832,277,260,1035,1104,891,473,1149,322,799,800,579,232,775,895,278,909,547,5,104,555,276,887,509,1217,759,288,972,1176,1059,1227,809,705,574,653,572,1060,595,342,548,97,337,180,464,1213,434,408,1013,1229,993,505,540,96,1071,546,982,1120,158,1098,1136,48,89,279,1183,700,873,959,391,1092,1172,949,910,455,724,907,1142,853,846,929,798,1214,8,963,167,145,254,942,256,327,1055,1233,536,293,201,497,388,602,343,61,144,758,862,492,1161,472,295,583,582,803,839,1088,1235,836,826,612,1119,704,1175,1097,998,159,504,988,952,1065,183,596,33,465,91,517,380,793,1106,357,352,652,454,493,235,390,451,580,1047,1084,137,259,867,823,255,983,184,828,573,616,554,932,78,986,549,257,727,1204,503,292,1113,482,68,435,486,538,847,1030,1021,219,336,1008,200,795,1058,416,1080,105,1182,1003,888,838,436,537,603,79,885,417,353,1052,516,4,1167,776,841,437,578,1032,822,93,1031,883,725,1202,88,92,1187,54,77,210,1221,567,181,1215,994,928,55,234,299,1180,541,655,289,49,1224,32,539,185,1001,483,211,594,813,60,865,9,996,1016,816,98,326,76,842,575,617,182,1039,597,1061,654,521,859,487};
	for(int i=0; i < s.size(); i++)
		sol.sol.push_back(s[i]);
	return sol;
}

int main(int argc, char* argv[]){
	// srand(time(0));
	// cout << rand() % 10000 + 100;
	// return 0;

    //pt varibles
	float tempIni = 0.01;
	float tempfim = 2.0;
	int tempN = 10;
	int MCL = 0;
	int PTL = 2;	
	int tempUp = 50;
	int tempD = 1;
	int uType = 0;
	int thN = thread::hardware_concurrency();	
	vector<string> arguments(argv + 1, argv + argc);	

    //problem varibles
	int capacityMagazine = 8;
    int numberMachines   = 2;
    int planingHorizon   = 2;
    int unsupervised     = 0.5*DAY;
	int result_report    = 0;
	int instance_report  = 0;
	int instance_mode	 = 0;
	
	// Instance file name
	string filenameJobs = arguments[0];
	string filenameTools = arguments[1];
	string filenameoutput = arguments[2];
	
	// Read arguments
	for(unsigned int i=3; i<arguments.size(); i+=2)
	{
        if(arguments[i]== "--TEMP_FIM")
            tempfim = stof(arguments[i+1]);
        else if(arguments[i]== "--TEMP_INIT")
            tempIni = stof(arguments[i+1]);
        else if(arguments[i]== "--N_REPLICAS")
            tempN = stoi(arguments[i+1]);
        else if(arguments[i]== "--MCL")
            MCL  = stoi(arguments[i+1]);
        else if(arguments[i]== "--PTL")
            PTL = stoi(arguments[i+1]);
        else if(arguments[i]== "--TEMP_DIST")
            tempD = stoi(arguments[i+1]);
        else if(arguments[i]== "--TYPE_UPDATE")
            uType = stoi(arguments[i+1]);
        else if(arguments[i]== "--TEMP_UPDATE")
            tempUp = stoi(arguments[i+1]);
        else if(arguments[i]== "--THREAD_USED")
            thN = stoi(arguments[i+1]);
		else if(arguments[i]== "--THREAD_USED")
            thN = stoi(arguments[i+1]);
		else if(arguments[i]== "--CAPACITY")
			capacityMagazine = stoi(arguments[i+1]);
		else if(arguments[i]== "--MACHINES")
			numberMachines = stoi(arguments[i+1]);
		else if(arguments[i]== "--DAYS")
			planingHorizon = stoi(arguments[i+1]);
		else if(arguments[i]== "--UNSUPERVISED_MINUTS")
			unsupervised = stoi(arguments[i+1]);
		else if(arguments[i]== "--RESULT_REPORT")
			result_report = stoi(arguments[i+1]);
		else if(arguments[i]== "--INSTANCE_REPORT")
			instance_report = stoi(arguments[i+1]);
		else if(arguments[i]== "--INSTANCE_MODE")
			instance_mode = stoi(arguments[i+1]);	
    }
	tempUp = PTL/5;
	SSP* prob = new SSP(filenameJobs,filenameTools);
	prob->setParans(capacityMagazine, numberMachines, planingHorizon, unsupervised);

	// ------------------------------------------------------------------------------
	// TEST 2
	// ------------------------------------------------------------------------------

	// prob->groupJobs();
	// prob->printDataReport();
	// solSSP sol = prob->construction();
	// for(int i=0; i<sol.sol.size(); i++) cout << sol.sol[i] << " ";
	// cout << endl;


	// ------------------------------------------------------------------------------
	// TEST
	// ------------------------------------------------------------------------------

	// for (int i = 0; i < 10; i++){
	// 	string filenameoutputCur = "./output/Exemplo/output" + to_string(i) + ".txt";
	// 	solSSP sol = prob->construction();
	// 	for(int i=0; i<sol.sol.size(); i++) cout << sol.sol[i] << " ";
	// 	cout << endl;
	// 	int valor = prob->evaluateReportKTNS(sol, filenameJobs, filenameTools, filenameoutputCur, 1);
	// }

	// solSSP sol = makeTestSol(-1);
	// int valor = prob->evaluateReportKTNS(sol, filenameJobs, filenameTools, filenameoutput, 1);

	// ------------------------------------------------------------------------------
	// REAL
	// ------------------------------------------------------------------------------

	
	if (instance_mode == 1) prob->groupJobs();
	if (instance_report) prob->printDataReport();
	PT<solSSP> algo(tempIni,tempfim,tempN,MCL,PTL,tempD,uType,tempUp);
	ExecTime et;
	solSSP sol = algo.start(thN, prob);
	if (result_report)	prob->evaluateReportKTNS(sol, filenameJobs, filenameTools, filenameoutput, et.getTimeMs());
	auto end = chrono::high_resolution_clock::now();

	cout << (-1) * sol.evalSol << endl;
	cout << et.getTimeMs() << endl;
	// cout << algo.getIterationsToBestSol() << endl;

	return 0;
}

